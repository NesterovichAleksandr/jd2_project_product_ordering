/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package by.pvt.api;

import by.pvt.model.POSTREQProductOrder;
import by.pvt.model.ProductOrder;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-07T17:53:15.346+03:00")

@Api(value = "productOrder", description = "the productOrder API")
public interface ProductOrderApi {

    @ApiOperation(value = "Create a product order", nickname = "productOrderCreate", notes = "This operation creates a product order entity. Mandatory and non mandatory attributes, additional rules and default values are provided in the specifications document.", response = ProductOrder.class, tags={ "ProductOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = ProductOrder.class) })
    @RequestMapping(value = "/productOrder",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<ProductOrder> productOrderCreate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody POSTREQProductOrder productOrder);


    @ApiOperation(value = "List product orders", nickname = "productOrderFind", notes = "This operation list product order entities. Attribute  selection  is enabled for all first level attributes. Filtering may  be available  depending  on the compliance  level supported  by an implementation.", response = ProductOrder.class, responseContainer = "List", tags={ "ProductOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductOrder.class, responseContainer = "List") })
    @RequestMapping(value = "/productOrder",
        produces = { "application/json;charset=utf-8" }, 
        //consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<List<ProductOrder>> productOrderFind(@ApiParam(value = "Attributes selection") @Valid @RequestParam(value = "fields", required = false) String fields);


    @ApiOperation(value = "Retrieve a product order", nickname = "productOrderGet", notes = "This operation retrieves  a product order entity. Attribute  selection  is enabled for all first level attributes. Filtering on sub-resources  may  be available  depending on the compliance  level supported by an implementation.", response = ProductOrder.class, tags={ "ProductOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductOrder.class) })
    @RequestMapping(value = "/productOrder/{productOrderId}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<ProductOrder> productOrderGet(@ApiParam(value = "",required=true) @PathVariable("productOrderId") String productOrderId,@ApiParam(value = "Attributes selection") @Valid @RequestParam(value = "fields", required = false) String fields);


    @ApiOperation(value = "Patch a product order", nickname = "productOrderPatch", notes = "This    operation    allows    partial    updates    of    a    product    order    entity.    Support    of    json/merge (https://tools.ietf.org/html/rfc7386)  is  mandatory,  support  of  json/patch  (http://tools.ietf.org/html/rfc5789)  is optional. Patchable and not patchable attributes are provided in the specifications document.", response = ProductOrder.class, tags={ "ProductOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductOrder.class) })
    @RequestMapping(value = "/productOrder/{productOrderId}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.PATCH)
    ResponseEntity<ProductOrder> productOrderPatch(@ApiParam(value = "",required=true) @PathVariable("productOrderId") String productOrderId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductOrder productOrder);

}
